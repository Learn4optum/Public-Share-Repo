name: Full CI/CD Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  JAVA_VERSION: '21'
  HELM_VERSION: '3.14.2'
  ACR_NAME: youracr.azurecr.io
  IMAGE_NAME: mrcp-intake
  CHART_PATH: helm/mes-dev-azure
  VALUE_FILE: helm/values.yaml

jobs:

  build-and-scan:
    name: Build + Sonar + Fortify
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set-tag.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v3

      - name: Gradle Build
        run: ./gradlew build jacocoTestReport

      - name: Set Image Tag
        id: set-tag
        run: echo "image_tag=${GITHUB_RUN_NUMBER}" >> $GITHUB_OUTPUT

      - name: SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./gradlew sonarqube \
            -Dsonar.projectKey=mrcp-intake \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.exclusions="**/configuration/**/*,**/model/**/*"

      - name: Fortify Scan Placeholder
        if: ${{ secrets.FORTIFY_ENABLED == 'true' }}
        run: echo "Run Fortify CLI scan here"

  docker-push:
    name: Docker Build and Push
    needs: build-and-scan
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ needs.build-and-scan.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Docker Login to ACR
        run: az acr login --name ${{ env.ACR_NAME }}

      - name: Docker Build and Push
        run: |
          docker build -t ${{ env.ACR_NAME }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-scan.outputs.image_tag }} .
          docker push ${{ env.ACR_NAME }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-scan.outputs.image_tag }}

  twistlock-scan:
    name: Twistlock Scan
    needs: docker-push
    runs-on: ubuntu-latest
    steps:
      - name: Twistlock scan placeholder
        run: echo "Run Twistlock scan on ACR image here"

  integration-test:
    name: Ephemeral Deploy + Integration Test
    needs: docker-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: AKS Auth for NonProd
        uses: azure/aks-set-context@v3
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          cluster-name: ${{ secrets.AKS_CLUSTER_NONPROD }}
          resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}

      - name: Helm Install Ephemeral
        run: |
          helm upgrade --install test-ephemeral ${{ env.CHART_PATH }} \
            --values ${{ env.VALUE_FILE }} \
            --set image.tag=${{ needs.docker-push.outputs.image_tag }} \
            --set ingress.enabled=true

      - name: Wait and Run Integration Tests
        run: |
          sleep 25
          ./gradlew testIntegration -DbaseURI=http://nonprod.test/ -Dport=80

      - name: Upload Integration Test Report
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-report
          path: build/reports/tests/testIntegration

  deploy-nonprod:
    name: Deploy to NonProd
    needs: integration-test
    runs-on: ubuntu-latest
    environment: nonprod
    steps:
      - uses: actions/checkout@v4

      - name: Helm Deploy
        run: |
          helm upgrade --install ${{ env.IMAGE_NAME }} ${{ env.CHART_PATH }} \
            --values ${{ env.VALUE_FILE }} \
            --set image.tag=${{ needs.integration-test.outputs.image_tag }}

  deploy-test:
    name: Deploy to Test
    needs: deploy-nonprod
    runs-on: ubuntu-latest
    environment: test
    steps:
      - uses: actions/checkout@v4
      - name: Helm Deploy
        run: |
          helm upgrade --install ${{ env.IMAGE_NAME }} ${{ env.CHART_PATH }} \
            --values ${{ env.VALUE_FILE }} \
            --set image.tag=${{ needs.integration-test.outputs.image_tag }}

  deploy-uat:
    name: Deploy to UAT
    needs: deploy-test
    runs-on: ubuntu-latest
    environment: uat
    steps:
      - uses: actions/checkout@v4
      - name: Helm Deploy
        run: |
          helm upgrade --install ${{ env.IMAGE_NAME }} ${{ env.CHART_PATH }} \
            --values ${{ env.VALUE_FILE }} \
            --set image.tag=${{ needs.integration-test.outputs.image_tag }}

  deploy-stage:
    name: Deploy to Stage
    needs: deploy-uat
    runs-on: ubuntu-latest
    environment: stage
    steps:
      - uses: actions/checkout@v4
      - name: Helm Deploy
        run: |
          helm upgrade --install ${{ env.IMAGE_NAME }} ${{ env.CHART_PATH }} \
            --values ${{ env.VALUE_FILE }} \
            --set image.tag=${{ needs.integration-test.outputs.image_tag }}

  deploy-prod:
    name: ðŸš¨ Deploy to PROD (Requires Approval)
    needs: deploy-stage
    runs-on: ubuntu-latest
    environment: prod  # <- Requires manual approval via GitHub Environment protection rule
    steps:
      - uses: actions/checkout@v4
      - name: Helm Deploy
        run: |
          helm upgrade --install ${{ env.IMAGE_NAME }} ${{ env.CHART_PATH }} \
            --values ${{ env.VALUE_FILE }} \
            --set image.tag=${{ needs.integration-test.outputs.image_tag }}
